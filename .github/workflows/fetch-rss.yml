name: Fetch RSS Feed

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  fetch-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Fetch RSS feed
      run: |
        # Create a simple Node.js script to fetch and parse the RSS feed
        cat > fetch-rss.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        const RSS_URL = 'https://sendfull.substack.com/feed';
        
        function fetchRSS() {
          return new Promise((resolve, reject) => {
            const req = https.get(RSS_URL, (res) => {
              console.log('Response status:', res.statusCode);
              console.log('Content-Type:', res.headers['content-type']);
              
              let data = '';
              
              res.on('data', (chunk) => {
                data += chunk;
              });
              
              res.on('end', () => {
                console.log('Received data length:', data.length);
                console.log('First 200 chars:', data.substring(0, 200));
                resolve(data);
              });
            });
            
            req.on('error', (error) => {
              console.error('Request error:', error.message);
              reject(error);
            });
            
            req.setTimeout(15000, () => {
              console.error('Request timeout after 15 seconds');
              req.destroy();
              reject(new Error('Request timeout'));
            });
          });
        }
        
        function parseRSS(xmlText) {
          const posts = [];
          
          // Simple XML parsing to extract posts
          const itemRegex = /<item>([\s\S]*?)<\/item>/g;
          let match;
          
          while ((match = itemRegex.exec(xmlText)) !== null) {
            const itemContent = match[1];
            
            // Extract title
            const titleMatch = itemContent.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/);
            const title = titleMatch ? titleMatch[1] : '';
            
            // Extract description
            const descMatch = itemContent.match(/<description><!\[CDATA\[(.*?)\]\]><\/description>/);
            const description = descMatch ? descMatch[1] : '';
            
            // Extract link
            const linkMatch = itemContent.match(/<link>(.*?)<\/link>/);
            const link = linkMatch ? linkMatch[1] : '';
            
            // Extract pubDate
            const dateMatch = itemContent.match(/<pubDate>(.*?)<\/pubDate>/);
            const pubDate = dateMatch ? dateMatch[1] : '';
            
            // Extract image from enclosure
            const imageMatch = itemContent.match(/<enclosure[^>]*url="([^"]*)"[^>]*>/);
            const image = imageMatch ? imageMatch[1] : `https://picsum.photos/400/250?random=${Math.floor(Math.random() * 1000)}`;
            
            // Extract read time from description
            const readTimeMatch = description.match(/(\d+)\s*min\s*read/);
            const readTime = readTimeMatch ? `${readTimeMatch[1]} min read` : '5 min read';
            
            if (title && link) {
              posts.push({
                title: title,
                description: description.replace(/<[^>]*>/g, '').substring(0, 200) + '...',
                link: link,
                pubDate: pubDate,
                image: image,
                readTime: readTime
              });
            }
          }
          
          return posts.slice(0, 9); // Return only the first 9 posts
        }
        
        async function main() {
          try {
            console.log('Fetching RSS feed from:', RSS_URL);
            const xmlText = await fetchRSS();
            
            console.log('Validation checks:');
            console.log('- Contains <rss:', xmlText.includes('<rss'));
            console.log('- Contains <feed:', xmlText.includes('<feed'));
            console.log('- Contains <item:', xmlText.includes('<item'));
            console.log('- Contains <title:', xmlText.includes('<title'));
            
            // More robust validation
            if (!xmlText || xmlText.length < 100) {
              throw new Error('RSS feed is too short or empty');
            }
            
            if (!xmlText.includes('<rss') && !xmlText.includes('<feed')) {
              console.error('RSS content preview:', xmlText.substring(0, 500));
              throw new Error('Invalid RSS feed format - no <rss> or <feed> tags found');
            }
            
            const posts = parseRSS(xmlText);
            console.log(`Parsed ${posts.length} posts`);
            
            if (posts.length === 0) {
              throw new Error('No posts found in RSS feed');
            }
            
            const output = {
              lastUpdated: new Date().toISOString(),
              posts: posts
            };
            
            fs.writeFileSync('newsletter-rss.json', JSON.stringify(output, null, 2));
            console.log('Successfully updated newsletter-rss.json');
            
          } catch (error) {
            console.error('Error fetching RSS feed:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        }
        
        main();
        EOF
        
        node fetch-rss.js
        
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if git diff --quiet newsletter-rss.json; then
          echo "No changes to commit"
        else
          git add newsletter-rss.json
          git commit -m "Update RSS feed data [skip ci]"
          git push
        fi 
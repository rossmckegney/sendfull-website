name: Update RSS Feed

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  update-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
    - name: Update RSS feed
      run: |
        # Copy the update script to the runner
        cat > update-rss.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const zlib = require('zlib');

        const RSS_URL = 'https://sendfull.substack.com/feed';

        function fetchRSS() {
          return new Promise((resolve, reject) => {
            const options = {
              headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'application/xml, text/xml, */*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Cache-Control': 'no-cache'
              }
            };
            
            console.log('Making request to:', RSS_URL);
            
            const req = https.get(RSS_URL, options, (res) => {
              console.log(`üì° Fetching RSS feed... (Status: ${res.statusCode})`);
              console.log('Response headers:', JSON.stringify(res.headers, null, 2));
              
              let data = '';
              let stream = res;
              
              // Handle compression
              if (res.headers['content-encoding'] === 'gzip') {
                console.log('Handling gzip compression');
                stream = res.pipe(zlib.createGunzip());
              } else if (res.headers['content-encoding'] === 'br') {
                console.log('Handling brotli compression');
                stream = res.pipe(zlib.createBrotliDecompress());
              } else if (res.headers['content-encoding'] === 'deflate') {
                console.log('Handling deflate compression');
                stream = res.pipe(zlib.createInflate());
              } else {
                console.log('No compression detected');
              }
              
              stream.on('data', (chunk) => {
                data += chunk;
              });
              
              stream.on('end', () => {
                console.log(`Received ${data.length} characters`);
                resolve(data);
              });
              
              stream.on('error', (error) => {
                console.error('Stream error:', error);
                reject(error);
              });
            });
            
            req.on('error', (error) => {
              console.error('Request error:', error);
              reject(error);
            });
            
            req.setTimeout(15000, () => {
              console.error('Request timeout');
              req.destroy();
              reject(new Error('Request timeout'));
            });
          });
        }

        function parseRSS(xmlText) {
          const posts = [];
          
          // Simple XML parsing to extract posts
          const itemRegex = /<item>([\s\S]*?)<\/item>/g;
          let match;
          
          while ((match = itemRegex.exec(xmlText)) !== null) {
            const itemContent = match[1];
            
            // Extract title
            const titleMatch = itemContent.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/);
            const title = titleMatch ? titleMatch[1] : '';
            
            // Extract description
            const descMatch = itemContent.match(/<description><!\[CDATA\[(.*?)\]\]><\/description>/);
            const description = descMatch ? descMatch[1] : '';
            
            // Extract link
            const linkMatch = itemContent.match(/<link>(.*?)<\/link>/);
            const link = linkMatch ? linkMatch[1] : '';
            
            // Extract pubDate
            const dateMatch = itemContent.match(/<pubDate>(.*?)<\/pubDate>/);
            const pubDate = dateMatch ? dateMatch[1] : '';
            
            // Extract image from enclosure
            const imageMatch = itemContent.match(/<enclosure[^>]*url="([^"]*)"[^>]*>/);
            const image = imageMatch ? imageMatch[1] : `https://picsum.photos/400/250?random=${Math.floor(Math.random() * 1000)}`;
            
            // Extract read time from description
            const readTimeMatch = description.match(/(\d+)\s*min\s*read/);
            const readTime = readTimeMatch ? `${readTimeMatch[1]} min read` : '5 min read';
            
            if (title && link) {
              posts.push({
                title: title,
                description: description.replace(/<[^>]*>/g, '').substring(0, 200) + '...',
                link: link,
                pubDate: pubDate,
                image: image,
                readTime: readTime
              });
            }
          }
          
          return posts.slice(0, 9); // Return only the first 9 posts
        }

        async function main() {
          try {
            console.log('üöÄ Starting RSS feed update...\n');
            
            const xmlText = await fetchRSS();
            
            console.log('\nFirst 500 characters of response:');
            console.log(xmlText.substring(0, 500));
            
            // Validate RSS feed
            if (!xmlText.includes('<rss') && !xmlText.includes('<feed')) {
              throw new Error('Invalid RSS feed format');
            }
            
            const posts = parseRSS(xmlText);
            console.log(`‚úÖ Successfully parsed ${posts.length} posts`);
            
            if (posts.length === 0) {
              throw new Error('No posts found in RSS feed');
            }
            
            const output = {
              lastUpdated: new Date().toISOString(),
              posts: posts
            };
            
            // Check if file exists and compare
            let hasChanges = false;
            if (fs.existsSync('newsletter-rss.json')) {
              console.log('Existing newsletter-rss.json found');
              const existingContent = fs.readFileSync('newsletter-rss.json', 'utf8');
              const existingData = JSON.parse(existingContent);
              
              console.log('Existing lastUpdated:', existingData.lastUpdated);
              console.log('New lastUpdated:', output.lastUpdated);
              
              // Compare the posts
              if (JSON.stringify(existingData.posts) !== JSON.stringify(posts)) {
                hasChanges = true;
                console.log('üìù Changes detected in RSS feed');
              } else {
                console.log('‚ÑπÔ∏è No changes detected in RSS feed');
              }
            } else {
              hasChanges = true;
              console.log('üìù Creating new newsletter-rss.json file');
            }
            
            if (hasChanges) {
              fs.writeFileSync('newsletter-rss.json', JSON.stringify(output, null, 2));
              console.log('üíæ Updated newsletter-rss.json');
              
              console.log('\nüìã Latest posts:');
              posts.forEach((post, index) => {
                console.log(`${index + 1}. ${post.title}`);
              });
              
              console.log('\nüéâ RSS feed update complete!');
            } else {
              console.log('‚ÑπÔ∏è No changes to commit');
            }
            
          } catch (error) {
            console.error('‚ùå Error updating RSS feed:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        }

        main();
        EOF
        
        node update-rss.js
        
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        echo "Git configured"
        
    - name: Check for changes
      id: check-changes
      run: |
        echo "Checking for changes in newsletter-rss.json..."
        if git diff --quiet newsletter-rss.json; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes to commit"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in newsletter-rss.json"
          git diff --stat newsletter-rss.json
        fi
        
    - name: Commit and push changes
      if: steps.check-changes.outputs.has_changes == 'true'
      run: |
        echo "Committing and pushing changes..."
        git add newsletter-rss.json
        git commit -m "ü§ñ Auto-update RSS feed [skip ci]"
        git push
        echo "‚úÖ RSS feed updated and pushed"
        
    - name: No changes message
      if: steps.check-changes.outputs.has_changes == 'false'
      run: |
        echo "‚ÑπÔ∏è No changes detected in RSS feed" 